// this is literal types means holds the actual values //

type week =  "MON" | "TUE" | "WED" | "THU" | "FRI" | "SAT" | "SUN" // this is also an example of 'UNION' it is simply like an OR operator.

const day: week = "MON";
const num:4 = 4 


//let's try tuples and see the code //

type tuple = [number,string];
const arr:tuple = [34,"bye"];

// so no extra code is generated in java script for above examples //


let object:{x: number,y:string} = {x : 34,y:"string"}

// Alias is nothing but to define object type //

type Person = {
    name :string;
    age : number;
    gender?:string,
    readonly qualification : string
}
const person1:Person = {
    name : "navneet",
    age : 28,
    qualification : "Graduated",
}

// No extra code is generated by typescript in javascript upto these examples //

// let's make 2d arrays //
let arr2:number[][] = [[1,2],[3,4]];
console.info("arr2",arr2)

arr2 = [[1,2,23,4]]

// So upto so far, no excess code was generated by typescript weather you use, 'union,intersection,readonly,optional,tuple,alias etc'.
// Let's test enum now //


const enum statusCodes {
    SUCCESS = 200,
    FORBIDDEN = 404,
    NOT_FOUND = 400,
    UNAUTHORIZED = 401
}

const checkStatus = statusCodes.UNAUTHORIZED;
console.info("checkStatus",checkStatus)

// So in this case typescript has generated , bunch of javascript code, which is not that good.
// but if you add const in front of enum, then it will not generate code in js file.

